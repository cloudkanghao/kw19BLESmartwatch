
import sys
import dbus, dbus.exceptions, dbus.mainloop.glib
from gi.repository import GLib
from gatt_advert import Advertisement
from gatt_advert import register_ad_cb, register_ad_error_cb
from gatt_server import Service, Characteristic, BatteryService, Descriptor, CharacteristicUserDescriptionDescriptor
from gatt_server import register_app_cb, register_app_error_cb
 
BLUEZ_SERVICE_NAME =           'org.bluez'
DBUS_OM_IFACE =                'org.freedesktop.DBus.ObjectManager'
LE_ADVERTISING_MANAGER_IFACE = 'org.bluez.LEAdvertisingManager1'
GATT_MANAGER_IFACE =           'org.bluez.GattManager1'
GATT_CHRC_IFACE =              'org.bluez.GattCharacteristic1'
DBUS_PROP_IFACE =    	       'org.freedesktop.DBus.Properties'

# replace with the unique UUID of your app
uuid = '0000feea-0000-1000-8000-00805f9b34fb'
LOCAL_NAME = 'KW19-B'

mainloop = None

payloadstr= 'Testing pairing here!!!'
payload=payloadstr.encode('ascii') 

class devCharacteristic(Characteristic):

    def __init__(self, bus, index, serviceUuid, service):
        Characteristic.__init__(self, bus, index, serviceUuid, ['read'], service)
        if index == 0:
            self.value = 'MOY-SBH4-1.7.5'.encode('ascii')
        elif index == 1:
            self.value = 'bc23428b'.encode('ascii')
        else:
            self.value = 'MOYOUNG-HS'.encode('ascii')

    def ReadValue(self, options):
        return self.value

class myCharacteristic(Characteristic):

    def __init__(self, bus, index, serviceUuid, service):
        Characteristic.__init__(self, bus, index, serviceUuid, ['read', 'write', 'notify'], service)
        self.value = payload

    def ReadValue(self, options):
        print('Characteristic Read: 00000')
        return '<'.encode('ascii')

    def WriteValue(self, value, options):
        #print('Characteristic Write: ' + repr(value))
        print("Characteristic Write: " + str(value))
        self.value = value

    def NotifyValue(self, value, options):
        print("Notify Characteristic Notify: " + str(value))
        self.value = value
        return self.value

    def StartNotify(self):
        if self.notifying:
            print ('Already notifying, nothing to do')    
            return

        self.notifying = True
        print('started notifying!')
        self._update_hr_msrmt_simulation()

    def StopNotify(self):
        if not self.notifying:
            print ('Not notifying, nothing to do')
            return
        
        self.notifying = False
        self._update_hr_msrmt_simulation()


class myService(Service):
    def __init__(self, bus, index):
        Service.__init__(self, bus, index, uuid, True)
        self.add_characteristic(myCharacteristic(bus, 0, '0000fee1-0000-1000-8000-00805f9b34fb', self))
        self.add_characteristic(myCharacteristic(bus, 1, '0000fee2-0000-1000-8000-00805f9b34fb', self))
        self.add_characteristic(myCharacteristic(bus, 2, '0000fee3-0000-1000-8000-00805f9b34fb', self))
        self.add_characteristic(myCharacteristic(bus, 3, '00002a19-0000-1000-8000-00805f9b34fb', self))

class devService(Service):
    def __init__(self, bus, index):
        Service.__init__(self, bus, index, '180a', True)
        self.add_characteristic(devCharacteristic(bus, 0, '2a28', self))
        self.add_characteristic(devCharacteristic(bus, 1, '2a25', self))
        self.add_characteristic(devCharacteristic(bus, 2, '2a29', self))

class Application(dbus.service.Object):
    def __init__(self, bus):
        self.path = '/'
        self.services = []
        dbus.service.Object.__init__(self, bus, self.path)
 
    def get_path(self):
        return dbus.ObjectPath(self.path)
 
    def add_service(self, service):
        self.services.append(service)
 
    @dbus.service.method(DBUS_OM_IFACE, out_signature='a{oa{sa{sv}}}')
    def GetManagedObjects(self):
        response = {}
        for service in self.services:
            response[service.get_path()] = service.get_properties()
            chrcs = service.get_characteristics()
            for chrc in chrcs:
                response[chrc.get_path()] = chrc.get_properties()
        return response
 
class myApplication(Application):
    def __init__(self, bus):
        Application.__init__(self, bus)
        self.add_service(myService(bus, 0))
        self.add_service(devService(bus, 1))
        self.add_service(BatteryService(bus, 2))

class myAdvertisement(Advertisement):

    def __init__(self, bus, index):
        Advertisement.__init__(self, bus, index, 'peripheral')
        self.add_service_uuid(uuid)
        self.add_manufacturer_data(0x02ff, [0xff, 0x03])
        self.add_local_name(LOCAL_NAME)
        self.include_tx_power = True

 
def find_adapter(bus):
    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'), DBUS_OM_IFACE)
    objects = remote_om.GetManagedObjects()

    for o, props in objects.items():
        if LE_ADVERTISING_MANAGER_IFACE in props and GATT_MANAGER_IFACE in props:
            return o
        print('Skip adapter:', o)
    return None
 
def main():
    global mainloop
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()
    adapter = find_adapter(bus)
    if not adapter:
        print('BLE adapter not found')
        return
 
    service_manager = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, adapter), GATT_MANAGER_IFACE)
    ad_manager = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, adapter), LE_ADVERTISING_MANAGER_IFACE)
 
    app = myApplication(bus)
    adv = myAdvertisement(bus, 0)
 
    mainloop = GLib.MainLoop()
 
    service_manager.RegisterApplication(app.get_path(), {},
                                        reply_handler=register_app_cb,
                                        error_handler=register_app_error_cb)
    ad_manager.RegisterAdvertisement(adv.get_path(), {},
                                     reply_handler=register_ad_cb,
                                     error_handler=register_ad_error_cb)
    try:
        mainloop.run()
    except KeyboardInterrupt:
        adv.Release()
 
if __name__ == '__main__':
    main()
